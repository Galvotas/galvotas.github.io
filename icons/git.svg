<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs" version="1.1" width="512" height="512" x="0" y="0" viewBox="0 0 24 24" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><g><path xmlns="http://www.w3.org/2000/svg" d="m10.735 5.823c-.909.365-1.887.632-2.882.632-2.845-1.661-6.706.07-6.706 3.708h.001c0 1.356.856 3.215 2.194 3.67v.054c-.994.445-1.269 2.711.053 3.525v.054c-1.444.481-2.395 1.408-2.395 3.009 0 2.759 2.58 3.525 4.839 3.525 2.751 0 4.797-1.002 4.797-4.072 0-3.777-5.341-2.384-5.341-4.436 0-.723.381-1.002 1.041-1.141 2.194-.413 3.57-2.143 3.57-4.404 0-.391-.079-.761-.212-1.125.354-.08.698-.177 1.041-.295zm-4.949 13.116v-.001c.899 0 2.179.161 2.179 1.339 0 1.168-1.031 1.409-1.994 1.409-.915 0-2.29-.145-2.29-1.35.005-1.193 1.168-1.397 2.105-1.397zm-.169-6.937v-.001c-1.163 0-1.655-.696-1.655-1.81 0-2.641 3.226-2.614 3.226-.026-.001 1.087-.424 1.837-1.571 1.837z" fill="#0074d9" data-original="#000000" style=""/><path xmlns="http://www.w3.org/2000/svg" d="m23 17.277v-2.625c-.423.295-1.031.445-1.549.445-.978 0-1.153-.965-1.153-1.758v-4.88c1.677 0 2.698.054 2.698.054v-2.546h-2.698c0-.734-.027-1.467.079-2.207h-2.999c.095.546.079 1.013.079 2.207h-1.269v2.545c.883-.139.899-.054 1.269-.054v.054h-.026v4.698c0 2.33.333 4.591 3.162 4.591.794.001 1.704-.133 2.407-.524z" fill="#0074d9" data-original="#000000" style=""/><path xmlns="http://www.w3.org/2000/svg" d="m13.492 0c-1.057 0-1.824.931-1.824 1.966 0 1.018.777 1.94 1.824 1.94 1.02 0 1.787-.937 1.787-1.94 0-1.001-.741-1.966-1.787-1.966z" fill="#0074d9" data-original="#000000" style=""/><path xmlns="http://www.w3.org/2000/svg" d="m12.016 5.957c.095.792.085 10.699 0 11.668h2.936c-.085-.963-.095-10.886 0-11.668z" fill="#0074d9" data-original="#000000" style=""/><script>// Promises 
var _eid_promises = {}; 
if (typeof isignDebug !== 'function') { 
    var isignDebug = function(msg){}; 
} 
// Turn the incoming message from extension 
// into pending Promise resolving 
window.addEventListener("message", function(event) { 
    if(event.source !== window) return; 
    if(event.data.src &amp;&amp; (event.data.src === "isign-background.js")) { 
        isignDebug("Page received: "); 
        isignDebug(event.data); 
        // Get the promise 
        if(event.data.nonce) { 
            var p = _eid_promises[event.data.nonce]; 
            // resolve 
            if(event.data.result === "ok") { 
                if(event.data.signature !== undefined) { 
                    if(p){ 
                        p.resolve({hex: event.data.signature}); 
                    } 
                } else if(event.data.certificate !== undefined) { 
                    if(p){ 
                        var info = {hex: event.data.certificate, module: event.data.module, slot: event.data.slot, name: event.data.name, issuer: event.data.issuer, isLoginCertificate: event.data.isLoginCertificate, isSigningCertificate: event.data.isSigningCertificate, validTo: event.data.validTo, log: event.data.log, driversList: event.data.driversList}; 
                        if(event.data.hardwareManufacturer){
                            info.hardwareManufacturer = event.data.hardwareManufacturer;
                        }
                        if(event.data.hardwareLabel){
                            info.hardwareLabel = event.data.hardwareLabel;
                        }
                        p.resolve(info); 
                    } 
                } else if(event.data.nativeHostVersion !== undefined) { 
                    var result = {nativeHostVersion: event.data.nativeHostVersion, driversFound: event.data.driversFound, driversList: event.data.driversList}; 
                    if(event.data.log){ 
                        result.log = event.data.log; 
                    } 
                    if(p){ 
                        p.resolve(result); 
                    } 
                } else if(event.data.version !== undefined) { 
                    var result = {version: event.data.extension + "/" + event.data.version, driversFound: event.data.driversFound}; 
                    if(event.data.log){ 
                        result.log = event.data.log; 
                    } 
                    if(p){ 
                        p.resolve(result); 
                    } 
                } else { 
                    isignDebug("No idea how to handle message"); 
                    isignDebug(event.data); 
                } 
            } else { 
                // reject 
                if(p){ 
                    p.reject(new Error(JSON.stringify(event.data))); 
                } 
            } 
            delete _eid_promises[event.data.nonce]; 
        } else { 
            isignDebug("No nonce in event msg"); 
        } 
    } 
}, false); 
 
 
function IsignChromeSigning() { 
    function nonce() { 
        var val = ""; 
        var hex = "abcdefghijklmnopqrstuvwxyz0123456789"; 
        for(var i = 0; i &lt; 16; i++) val += hex.charAt(Math.floor(Math.random() * hex.length)); 
        return val; 
    } 
 
    function messagePromise(msg) { 
        return new Promise(function(resolve, reject) { 
            // amend with necessary metadata 
            msg['nonce'] = nonce(); 
            msg['src'] = 'isign-page.js'; 
            // send message 
            window.postMessage(msg, "*"); 
            // and store promise callbacks 
            _eid_promises[msg.nonce] = { 
                resolve: resolve, 
                reject: reject 
            }; 
        }); 
    } 
    this.getCertificate = function(options) { 
        if(options.policyId &amp;&amp; (typeof options.policyIds === 'undefined' || options.policyIds.length == 0)){ 
            options.policyIds = new Array(); 
            options.policyIds.push(options.policyId); 
        } 
        if(typeof options.residency === 'undefined') { 
            options.residency = ''; 
        } 
        var msg = {type: 'CERT', lang: options.lang, certificatePurpose: options.certificatePurpose, isInitial: options.isInitial, policyId: options.policyId, policyIds: options.policyIds, bulkSigning: options.bulkSigning, residency: options.residency}; 
        isignDebug("getCertificate()"); 
        return messagePromise(msg); 
    }; 
    this.sign = function(cert, hash, options) { 
        var msg = {type: 'SIGN', cert: cert.hex, hash: hash.hex, module: cert.module, slot: cert.slot, isLoginCertificate: cert.isLoginCertificate, isSigningCertificate: cert.isSigningCertificate, hashAlgorithm: hash.type, lang: options.lang}; 
        isignDebug("sign()"); 
        return messagePromise(msg); 
    }; 
    this.getVersion = function() { 
        isignDebug("getVersion()"); 
        return messagePromise({ 
            type: 'VERSION' 
        }); 
    }; 
}</script></g></svg>
