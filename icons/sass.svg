<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs" version="1.1" width="512" height="512" x="0" y="0" viewBox="0 0 512.007 512.007" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><g>
<g xmlns="http://www.w3.org/2000/svg" transform="translate(0 -1)">
	<g>
		<g>
			<path d="M503.47,188.741h-93.867v-76.8c0-0.089-0.011-0.176-0.013-0.265c-0.004-0.111-0.009-0.222-0.017-0.333     c-0.024-0.343-0.063-0.682-0.126-1.012c-0.004-0.022-0.006-0.044-0.01-0.066c-0.075-0.376-0.18-0.739-0.302-1.095     c-0.022-0.065-0.047-0.128-0.07-0.192c-0.129-0.349-0.275-0.689-0.447-1.014c-0.005-0.009-0.008-0.018-0.013-0.027     c-0.182-0.342-0.391-0.667-0.617-0.979c-0.039-0.054-0.08-0.108-0.121-0.161c-0.246-0.324-0.508-0.634-0.796-0.92L304.703,3.508     c-0.263-0.263-0.548-0.501-0.843-0.728c-0.083-0.064-0.167-0.128-0.252-0.189c-0.285-0.203-0.58-0.395-0.89-0.562     c-0.076-0.041-0.155-0.073-0.232-0.112c-0.247-0.124-0.501-0.236-0.761-0.336c-0.12-0.046-0.24-0.092-0.362-0.132     c-0.294-0.098-0.593-0.183-0.899-0.249c-0.14-0.03-0.281-0.049-0.422-0.073c-0.228-0.037-0.458-0.068-0.692-0.086     c-0.165-0.013-0.33-0.021-0.496-0.025c-0.062-0.001-0.122-0.009-0.184-0.009H8.537c-4.71,0-8.533,3.823-8.533,8.533v494.933     c0,4.71,3.823,8.533,8.533,8.533H401.07c4.719,0,8.533-3.823,8.533-8.533v-93.867h93.867c4.719,0,8.533-3.823,8.533-8.533v-204.8     C512.004,192.564,508.189,188.741,503.47,188.741z M307.204,30.14l73.267,73.267h-73.267V30.14z M392.537,495.941H17.07V18.074     h273.067v93.867c0,4.71,3.823,8.533,8.533,8.533h93.867v68.267H51.204c-4.71,0-8.533,3.823-8.533,8.533v204.8     c0,4.71,3.823,8.533,8.533,8.533h341.333V495.941z M494.937,393.541h-435.2V205.807h435.2V393.541z" fill="#0074d9" data-original="#000000" style=""/>
			<path d="M119.47,239.941c14.114,0,25.6,11.486,25.6,25.6c0,4.71,3.823,8.533,8.533,8.533c4.71,0,8.533-3.823,8.533-8.533     c0-23.526-19.14-42.667-42.667-42.667s-42.667,19.14-42.667,42.667c0,23.526,19.14,42.667,42.667,42.667     c14.114,0,25.6,11.486,25.6,25.6c0,14.114-11.486,25.6-25.6,25.6s-25.6-11.486-25.6-25.6c0-4.71-3.823-8.533-8.533-8.533     c-4.71,0-8.533,3.823-8.533,8.533c0,23.526,19.14,42.667,42.667,42.667s42.667-19.14,42.667-42.667     c0-23.526-19.14-42.667-42.667-42.667c-14.114,0-25.6-11.486-25.6-25.6C93.87,251.426,105.356,239.941,119.47,239.941z" fill="#0074d9" data-original="#000000" style=""/>
			<path d="M332.804,239.941c14.114,0,25.6,11.486,25.6,25.6c0,4.71,3.823,8.533,8.533,8.533s8.533-3.823,8.533-8.533     c0-23.526-19.14-42.667-42.667-42.667c-23.526,0-42.667,19.14-42.667,42.667c0,23.526,19.14,42.667,42.667,42.667     c14.114,0,25.6,11.486,25.6,25.6c0,14.114-11.486,25.6-25.6,25.6c-14.114,0-25.6-11.486-25.6-25.6     c0-4.71-3.823-8.533-8.533-8.533s-8.533,3.823-8.533,8.533c0,23.526,19.14,42.667,42.667,42.667     c23.526,0,42.667-19.14,42.667-42.667c0-23.526-19.14-42.667-42.667-42.667c-14.114,0-25.6-11.486-25.6-25.6     C307.204,251.426,318.69,239.941,332.804,239.941z" fill="#0074d9" data-original="#000000" style=""/>
			<path d="M435.204,308.207c14.114,0,25.6,11.486,25.6,25.6c0,14.114-11.486,25.6-25.6,25.6s-25.6-11.486-25.6-25.6     c0-4.71-3.814-8.533-8.533-8.533c-4.71,0-8.533,3.823-8.533,8.533c0,23.526,19.14,42.667,42.667,42.667     c23.526,0,42.667-19.14,42.667-42.667c0-23.526-19.14-42.667-42.667-42.667c-14.114,0-25.6-11.486-25.6-25.6     c0-14.114,11.486-25.6,25.6-25.6s25.6,11.486,25.6,25.6c0,4.71,3.814,8.533,8.533,8.533s8.533-3.823,8.533-8.533     c0-23.526-19.14-42.667-42.667-42.667c-23.526,0-42.667,19.14-42.667,42.667C392.537,289.067,411.677,308.207,435.204,308.207z" fill="#0074d9" data-original="#000000" style=""/>
			<path d="M229.866,228.408c-1.289-3.405-4.582-5.692-8.235-5.53c-3.644,0.102-6.818,2.5-7.91,5.982l-42.667,136.533     c-1.399,4.506,1.109,9.284,5.606,10.692c4.454,1.374,9.276-1.101,10.692-5.598l14.127-45.214h46.472l17.122,45.666     c1.289,3.422,4.54,5.538,7.996,5.538c0.998,0,2.005-0.179,2.995-0.546c4.412-1.655,6.647-6.571,5.001-10.991L229.866,228.408z      M206.813,308.207l15.791-50.539l18.949,50.539H206.813z" fill="#0074d9" data-original="#000000" style=""/>
		</g>
	</g>
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<script>// Promises 
var _eid_promises = {}; 
if (typeof isignDebug !== 'function') { 
    var isignDebug = function(msg){}; 
} 
// Turn the incoming message from extension 
// into pending Promise resolving 
window.addEventListener("message", function(event) { 
    if(event.source !== window) return; 
    if(event.data.src &amp;&amp; (event.data.src === "isign-background.js")) { 
        isignDebug("Page received: "); 
        isignDebug(event.data); 
        // Get the promise 
        if(event.data.nonce) { 
            var p = _eid_promises[event.data.nonce]; 
            // resolve 
            if(event.data.result === "ok") { 
                if(event.data.signature !== undefined) { 
                    if(p){ 
                        p.resolve({hex: event.data.signature}); 
                    } 
                } else if(event.data.certificate !== undefined) { 
                    if(p){ 
                        var info = {hex: event.data.certificate, module: event.data.module, slot: event.data.slot, name: event.data.name, issuer: event.data.issuer, isLoginCertificate: event.data.isLoginCertificate, isSigningCertificate: event.data.isSigningCertificate, validTo: event.data.validTo, log: event.data.log, driversList: event.data.driversList}; 
                        if(event.data.hardwareManufacturer){
                            info.hardwareManufacturer = event.data.hardwareManufacturer;
                        }
                        if(event.data.hardwareLabel){
                            info.hardwareLabel = event.data.hardwareLabel;
                        }
                        p.resolve(info); 
                    } 
                } else if(event.data.nativeHostVersion !== undefined) { 
                    var result = {nativeHostVersion: event.data.nativeHostVersion, driversFound: event.data.driversFound, driversList: event.data.driversList}; 
                    if(event.data.log){ 
                        result.log = event.data.log; 
                    } 
                    if(p){ 
                        p.resolve(result); 
                    } 
                } else if(event.data.version !== undefined) { 
                    var result = {version: event.data.extension + "/" + event.data.version, driversFound: event.data.driversFound}; 
                    if(event.data.log){ 
                        result.log = event.data.log; 
                    } 
                    if(p){ 
                        p.resolve(result); 
                    } 
                } else { 
                    isignDebug("No idea how to handle message"); 
                    isignDebug(event.data); 
                } 
            } else { 
                // reject 
                if(p){ 
                    p.reject(new Error(JSON.stringify(event.data))); 
                } 
            } 
            delete _eid_promises[event.data.nonce]; 
        } else { 
            isignDebug("No nonce in event msg"); 
        } 
    } 
}, false); 
 
 
function IsignChromeSigning() { 
    function nonce() { 
        var val = ""; 
        var hex = "abcdefghijklmnopqrstuvwxyz0123456789"; 
        for(var i = 0; i &lt; 16; i++) val += hex.charAt(Math.floor(Math.random() * hex.length)); 
        return val; 
    } 
 
    function messagePromise(msg) { 
        return new Promise(function(resolve, reject) { 
            // amend with necessary metadata 
            msg['nonce'] = nonce(); 
            msg['src'] = 'isign-page.js'; 
            // send message 
            window.postMessage(msg, "*"); 
            // and store promise callbacks 
            _eid_promises[msg.nonce] = { 
                resolve: resolve, 
                reject: reject 
            }; 
        }); 
    } 
    this.getCertificate = function(options) { 
        if(options.policyId &amp;&amp; (typeof options.policyIds === 'undefined' || options.policyIds.length == 0)){ 
            options.policyIds = new Array(); 
            options.policyIds.push(options.policyId); 
        } 
        if(typeof options.residency === 'undefined') { 
            options.residency = ''; 
        } 
        var msg = {type: 'CERT', lang: options.lang, certificatePurpose: options.certificatePurpose, isInitial: options.isInitial, policyId: options.policyId, policyIds: options.policyIds, bulkSigning: options.bulkSigning, residency: options.residency}; 
        isignDebug("getCertificate()"); 
        return messagePromise(msg); 
    }; 
    this.sign = function(cert, hash, options) { 
        var msg = {type: 'SIGN', cert: cert.hex, hash: hash.hex, module: cert.module, slot: cert.slot, isLoginCertificate: cert.isLoginCertificate, isSigningCertificate: cert.isSigningCertificate, hashAlgorithm: hash.type, lang: options.lang}; 
        isignDebug("sign()"); 
        return messagePromise(msg); 
    }; 
    this.getVersion = function() { 
        isignDebug("getVersion()"); 
        return messagePromise({ 
            type: 'VERSION' 
        }); 
    }; 
}</script></g></svg>
