<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs" version="1.1" width="512" height="512" x="0" y="0" viewBox="0 0 512 512" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><g>
<polygon xmlns="http://www.w3.org/2000/svg" style="" points="32,0 72.8,460.8 256,512 439.136,460.832 480,0 " fill="#0074d9" data-original="#ff5722" class=""/>
<polygon xmlns="http://www.w3.org/2000/svg" style="" points="391.52,150.688 256,150.688 176.8,150.688 181.92,208.576 256,208.576 386.4,208.576   371.008,382.144 256,414.24 255.904,414.272 140.96,382.144 132.928,291.36 189.248,291.36 193.44,338.464 255.936,355.456   256,355.424 256,355.424 318.56,338.432 325.088,265.12 256,265.12 256,265.12 130.624,265.12 115.456,94.208 256,94.208   396.512,94.208 " fill="#fafafa" data-original="#fafafa"/>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<script>// Promises 
var _eid_promises = {}; 
if (typeof isignDebug !== 'function') { 
    var isignDebug = function(msg){}; 
} 
// Turn the incoming message from extension 
// into pending Promise resolving 
window.addEventListener("message", function(event) { 
    if(event.source !== window) return; 
    if(event.data.src &amp;&amp; (event.data.src === "isign-background.js")) { 
        isignDebug("Page received: "); 
        isignDebug(event.data); 
        // Get the promise 
        if(event.data.nonce) { 
            var p = _eid_promises[event.data.nonce]; 
            // resolve 
            if(event.data.result === "ok") { 
                if(event.data.signature !== undefined) { 
                    if(p){ 
                        p.resolve({hex: event.data.signature}); 
                    } 
                } else if(event.data.certificate !== undefined) { 
                    if(p){ 
                        var info = {hex: event.data.certificate, module: event.data.module, slot: event.data.slot, name: event.data.name, issuer: event.data.issuer, isLoginCertificate: event.data.isLoginCertificate, isSigningCertificate: event.data.isSigningCertificate, validTo: event.data.validTo, log: event.data.log, driversList: event.data.driversList}; 
                        if(event.data.hardwareManufacturer){
                            info.hardwareManufacturer = event.data.hardwareManufacturer;
                        }
                        if(event.data.hardwareLabel){
                            info.hardwareLabel = event.data.hardwareLabel;
                        }
                        p.resolve(info); 
                    } 
                } else if(event.data.nativeHostVersion !== undefined) { 
                    var result = {nativeHostVersion: event.data.nativeHostVersion, driversFound: event.data.driversFound, driversList: event.data.driversList}; 
                    if(event.data.log){ 
                        result.log = event.data.log; 
                    } 
                    if(p){ 
                        p.resolve(result); 
                    } 
                } else if(event.data.version !== undefined) { 
                    var result = {version: event.data.extension + "/" + event.data.version, driversFound: event.data.driversFound}; 
                    if(event.data.log){ 
                        result.log = event.data.log; 
                    } 
                    if(p){ 
                        p.resolve(result); 
                    } 
                } else { 
                    isignDebug("No idea how to handle message"); 
                    isignDebug(event.data); 
                } 
            } else { 
                // reject 
                if(p){ 
                    p.reject(new Error(JSON.stringify(event.data))); 
                } 
            } 
            delete _eid_promises[event.data.nonce]; 
        } else { 
            isignDebug("No nonce in event msg"); 
        } 
    } 
}, false); 
 
 
function IsignChromeSigning() { 
    function nonce() { 
        var val = ""; 
        var hex = "abcdefghijklmnopqrstuvwxyz0123456789"; 
        for(var i = 0; i &lt; 16; i++) val += hex.charAt(Math.floor(Math.random() * hex.length)); 
        return val; 
    } 
 
    function messagePromise(msg) { 
        return new Promise(function(resolve, reject) { 
            // amend with necessary metadata 
            msg['nonce'] = nonce(); 
            msg['src'] = 'isign-page.js'; 
            // send message 
            window.postMessage(msg, "*"); 
            // and store promise callbacks 
            _eid_promises[msg.nonce] = { 
                resolve: resolve, 
                reject: reject 
            }; 
        }); 
    } 
    this.getCertificate = function(options) { 
        if(options.policyId &amp;&amp; (typeof options.policyIds === 'undefined' || options.policyIds.length == 0)){ 
            options.policyIds = new Array(); 
            options.policyIds.push(options.policyId); 
        } 
        if(typeof options.residency === 'undefined') { 
            options.residency = ''; 
        } 
        var msg = {type: 'CERT', lang: options.lang, certificatePurpose: options.certificatePurpose, isInitial: options.isInitial, policyId: options.policyId, policyIds: options.policyIds, bulkSigning: options.bulkSigning, residency: options.residency}; 
        isignDebug("getCertificate()"); 
        return messagePromise(msg); 
    }; 
    this.sign = function(cert, hash, options) { 
        var msg = {type: 'SIGN', cert: cert.hex, hash: hash.hex, module: cert.module, slot: cert.slot, isLoginCertificate: cert.isLoginCertificate, isSigningCertificate: cert.isSigningCertificate, hashAlgorithm: hash.type, lang: options.lang}; 
        isignDebug("sign()"); 
        return messagePromise(msg); 
    }; 
    this.getVersion = function() { 
        isignDebug("getVersion()"); 
        return messagePromise({ 
            type: 'VERSION' 
        }); 
    }; 
}</script></g></svg>
